name: Django CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: django-app
  AWS_REGION: ap-south-1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python manage.py test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}"
        echo "DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}"
        docker build -t $ECR_REGISTRY/$DOCKER_IMAGE:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$DOCKER_IMAGE:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$DOCKER_IMAGE:$IMAGE_TAG $ECR_REGISTRY/$DOCKER_IMAGE:latest
        docker push $ECR_REGISTRY/$DOCKER_IMAGE:latest

    - name: Upload task definition artifact
      uses: actions/upload-artifact@v4
      with:
        name: task-definition
        path: ecs-task-definition.json

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3

    - name: Download task definition artifact
      uses: actions/download-artifact@v4
      with:
        name: task-definition

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Render Amazon ECS task definition
      id: render-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs-task-definition.json
        container-name: django-app
        image: 266869541547.dkr.ecr.ap-south-1.amazonaws.com/${{ env.DOCKER_IMAGE }}:${{ github.sha }}

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.render-task-def.outputs.task-definition }}
        service: django-app-task-service-xqiyh3cc
        cluster: my-cluster-django
        wait-for-service-stability: true

# Triggering a new run after IAM PassRole fix. 